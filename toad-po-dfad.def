Bootstrap: docker
From: ubuntu:22.04

%files
	## This copies all files in this repository into the container.
	## If you do so, please remove all files not needed to run the planner
	## (e.g. source-code, testing or debugging planning problems) from the container
	## to decrease its size as much as possible.
	. /planner	

%setup
	## The "%setup"-part of this script is called to bootstrap an empty
	## container.

%post
	## The "%post"-part of this script is called after the container has
	## been created with the "%setup"-part above and runs "inside the
	## container". Most importantly, it is used to install dependencies
	## and build the planner. Add all commands that have to be executed
	## once before the planner runs in this part of the script.
	
	## Install all necessary dependencies.
	apt-get update
	apt-get -y install make g++ bison cmake gengetopt flex unzip patch python3 libfst-dev

	## go to directory and make the planner
	cd /planner
	cd 00-parser/
	make
	mv pandaPIparser ..
	cd ..

	cd 01-grounder
	cd cpddl
	make boruvka opts bliss lpsolve
	make
	cd ../src
	make
	cd ..
	mv pandaPIgrounder ..
	cd ..

	cd 02-TOAD-Source
	mkdir bin
	cd bin
	cmake ..
	make
	mv toad ../..
	cd ../..

	cd 03-FD-TOAD-Heuristic
	./build.py
	mv builds/release/bin/downward ..
	cd ..

	cd 04-verification
	mkdir bin
	cd bin
	cmake ..
	make
	mv htnPrefixEncoding ../../verificationAsPlanning
	cd ../..

	cd 05-panda/src
	mkdir bin
	cd bin
	cmake ..
	make
	mv pandaPIengine ../../..
	cd ..


	## remove files not needed to execute the planner

%runscript
	## The runscript is called whenever the container is used to solve
	## an instance.
	
	## DOMAINFILE and PROBLEMFILE contain the HDDL input files.
	DOMAINFILE=$1
	PROBLEMFILE=$2
	## PLANFILE is the name of the file to which your planner should write the plan it found.
	PLANFILE=$3

	## run your planner here

	/planner/pandaPIparser $1 $2 temp.parsed
	if [ ! -f temp.parsed ]; then
		echo "Parsing failed."
		exit 101
	fi

	/planner/pandaPIgrounder -q -i temp.parsed "$(basename "$1" .hddl)-$(basename "$2" .hddl).psas"
	# /planner/pandaPIgrounder -q -DE temp.parsed "$(basename "$1" .hddl)-$(basename "$2" .hddl).psas"
	rm temp.parsed
	if [ ! -f "$(basename "$1" .hddl)-$(basename "$2" .hddl).psas" ]; then
		echo "Grounding failed."
		exit 102
	fi

	/planner/toad "TD-PO" "$(basename "$1" .hddl)-$(basename "$2" .hddl).psas" ht ipt=15

    status=$?
    if [ $status -ne 0 ]; then
      echo "status: $status"
      echo "TOAD failed."
      exit 103
    elif [ ! -f problem.sas ]; then
      echo "TOAD failed."
     exit 103
    fi

    /planner/downward --evaluator 'hff=ff()' --search "lazy_greedy([dfad(), hff], preferred=[hff], boost=1000)" < problem.sas

    /planner/pandaPIparser -c verify.log $3

## Update the following fields with meta data about your submission.
## Please use the same field names and use only one line for each value.
%labels
Name        TOAD
Description 
Authors     Daniel HÃ¶ller
SupportsRecursion yes
SupportsPartialOrder no
SupportsOptimalPlanning no
Track-TO-agile yes
Track-TO-satisficing yes
Track-TO-optimal no
Track-PO-agile no
Track-PO-satisficing no
Track-PO-optimal no
